-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\project_detect\FilterTapSystolicWvldin.vhd
-- Created: 2021-02-13 15:14:38
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FilterTapSystolicWvldin
-- Source Path: project_detect/Pulse Detector/Discrete FIR Filter HDL Optimized/FilterBank/subFilter/FilterTapSystolicWvldin
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY FilterTapSystolicWvldin IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinReg2_0_re                      :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        coefIn_0                          :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En23
        addin                             :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En37
        dinRegVld                         :   IN    std_logic;
        syncReset                         :   IN    std_logic;
        dinDly2                           :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        tapout                            :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En37
        tapoutVld                         :   OUT   std_logic
        );
END FilterTapSystolicWvldin;


ARCHITECTURE rtl OF FilterTapSystolicWvldin IS

  -- Signals
  SIGNAL dinReg2_0_re_signed              : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL coefIn_0_signed                  : signed(18 DOWNTO 0);  -- sfix19_En23
  SIGNAL addin_signed                     : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL fTap_din_reg1                    : signed(16 DOWNTO 0) := to_signed(16#00000#, 17);  -- sfix17
  SIGNAL fTap_coef_reg1                   : signed(18 DOWNTO 0) := to_signed(16#00000#, 19);  -- sfix19
  SIGNAL fTap_din_reg2                    : signed(16 DOWNTO 0) := to_signed(16#00000#, 17);  -- sfix17
  SIGNAL fTap_coef_reg2                   : signed(18 DOWNTO 0) := to_signed(16#00000#, 19);  -- sfix19
  SIGNAL fTap_mult_reg                    : signed(35 DOWNTO 0) := to_signed(0, 36);  -- sfix36
  SIGNAL fTap_addout_reg                  : signed(39 DOWNTO 0) := to_signed(0, 40);  -- sfix40
  SIGNAL fTap_din_reg1_next               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL fTap_coef_reg1_next              : signed(18 DOWNTO 0);  -- sfix19_En23
  SIGNAL fTap_din_reg2_next               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL fTap_coef_reg2_next              : signed(18 DOWNTO 0);  -- sfix19_En23
  SIGNAL fTap_mult_reg_next               : signed(35 DOWNTO 0);  -- sfix36_En37
  SIGNAL fTap_addout_reg_next             : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL dinDly2_tmp                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tapout_tmp                       : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL intdelay_reg                     : std_logic_vector(0 TO 3);  -- ufix1 [4]

BEGIN
  dinReg2_0_re_signed <= signed(dinReg2_0_re);

  coefIn_0_signed <= signed(coefIn_0);

  addin_signed <= signed(addin);

  -- FilterTapSystlicWvldIn
  fTap_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fTap_din_reg1 <= fTap_din_reg1_next;
        fTap_coef_reg1 <= fTap_coef_reg1_next;
        fTap_din_reg2 <= fTap_din_reg2_next;
        fTap_coef_reg2 <= fTap_coef_reg2_next;
        fTap_mult_reg <= fTap_mult_reg_next;
        fTap_addout_reg <= fTap_addout_reg_next;
      END IF;
    END IF;
  END PROCESS fTap_process;

  fTap_output : PROCESS (addin_signed, coefIn_0_signed, dinReg2_0_re_signed, dinRegVld, fTap_addout_reg,
       fTap_coef_reg1, fTap_coef_reg2, fTap_din_reg1, fTap_din_reg2,
       fTap_mult_reg)
    VARIABLE add_cast : signed(39 DOWNTO 0);
  BEGIN
    add_cast := to_signed(0, 40);
    fTap_din_reg1_next <= fTap_din_reg1;
    fTap_coef_reg1_next <= fTap_coef_reg1;
    fTap_din_reg2_next <= fTap_din_reg2;
    fTap_coef_reg2_next <= fTap_coef_reg2;
    fTap_mult_reg_next <= fTap_mult_reg;
    fTap_addout_reg_next <= fTap_addout_reg;
    IF dinRegVld = '1' THEN 
      add_cast := resize(fTap_mult_reg, 40);
      fTap_addout_reg_next <= add_cast + addin_signed;
      fTap_mult_reg_next <= fTap_din_reg2 * fTap_coef_reg2;
      fTap_din_reg2_next <= fTap_din_reg1;
      fTap_coef_reg2_next <= fTap_coef_reg1;
      fTap_din_reg1_next <= dinReg2_0_re_signed;
      fTap_coef_reg1_next <= coefIn_0_signed;
    END IF;
    dinDly2_tmp <= fTap_din_reg2;
    tapout_tmp <= fTap_addout_reg;
  END PROCESS fTap_output;


  dinDly2 <= std_logic_vector(dinDly2_tmp);

  tapout <= std_logic_vector(tapout_tmp);

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        intdelay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        intdelay_reg(0) <= dinRegVld;
        intdelay_reg(1 TO 3) <= intdelay_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  tapoutVld <= intdelay_reg(3);

END rtl;

